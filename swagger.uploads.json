{
  "swagger": "2.0",
  "info": {
    "title": "Box Platform API",
    "description": "[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.",
    "termsOfService": "https://cloud.app.box.com/s/rmwxu64h1ipr41u49w3bbuvbsa29wku9",
    "contact": {
      "name": "Box, Inc",
      "url": "https://box.dev",
      "email": "devrel@box.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "2.0.0",
    "x-box-commit-hash": "021960106e"
  },
  "host": "upload.box.com",
  "basePath": "/api/2.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/files/{file_id}/content": {
      "post": {
        "operationId": "post_files_id_content",
        "tags": [
          "Uploads"
        ],
        "summary": "Upload file version",
        "description": "Update a file's content. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.\n\n# Request body order\n\nThe `attributes` part of the body must come **before** the\n`file` part. Requests that do not follow this format when\nuploading the file will receive a HTTP `400` error with a\n`metadata_after_file_contents` error code.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represents a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "if-match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "content-md5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "412": {
            "description": "Returns an error when the `If-Match` header does not match\nthe current `etag` value of the file. This indicates that the file\nhas changed since it was last requested.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/content": {
      "post": {
        "operationId": "post_files_content",
        "tags": [
          "Uploads"
        ],
        "summary": "Upload file",
        "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.\n\n# Request body order\n\nThe `attributes` part of the body must come **before** the\n`file` part. Requests that do not follow this format when\nuploading the file will receive a HTTP `400` error with a\n`metadata_after_file_contents` error code.",
        "parameters": [
          {
            "name": "fields",
            "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "content-md5",
            "required": false,
            "in": "header",
            "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the new file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n* `bad_request` when a parameter is missing or incorrect.\n* `item_name_too_long` when the folder name is too long.\n* `item_name_invalid` when the folder name contains\n  non-valid characters.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the parent folder\ndoes not exist or if the user\nis not authorized to access the parent folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions": {
      "post": {
        "operationId": "post_files_upload_sessions",
        "summary": "Create upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Creates an upload session for a new file.",
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "400": {
            "description": "Returns an error if some of the parameters are missing or\nnot valid.\n\n* `missing_destination`: No `folder_id` was provided\n* `invalid_folder_id`: `folder_id` is not valid\n* `item_name_invalid`: `file_name` is not valid\n* `missing_file_size`: `file_size` was not provided\n* `invalid_file_size`: `file_size` was not a valid number\n* `file_size_too_small`: `file_size` is below minimum file size for\n  uploads via this API\n* `missing_file_name`: `file_name` was not provided",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "403": {
            "description": "Returns an error if the operation is not allowed for some reason.\n\n* `storage_limit_exceeded`: Account storage limit reached",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Returns an error if the parent folder could not be found, or\nthe authenticated user does not have access to it.\n\n* `invalid_parameter`: The `folder_id` value represents a\n  folder that the user does not have access to, or does not\n  exist.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "folder_id",
                "file_size",
                "file_name"
              ],
              "properties": {
                "folder_id": {
                  "description": "The ID of the folder to upload the new file to.",
                  "type": "string"
                },
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The name of new file",
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/files/{file_id}/upload_sessions": {
      "post": {
        "operationId": "post_files_id_upload_sessions",
        "summary": "Create upload session for existing file",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Creates an upload session for an existing file.",
        "parameters": [
          {
            "name": "file_id",
            "description": "The unique identifier that represents a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "file_size"
              ],
              "properties": {
                "file_size": {
                  "description": "The total number of bytes of the file to be uploaded",
                  "type": "integer",
                  "format": "int64"
                },
                "file_name": {
                  "description": "The optional new name of new file",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a new upload session.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "409": {
            "description": "Returns an error if the file already exists,\nor if the account has run out of disk space.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}": {
      "get": {
        "operationId": "get_files_upload_sessions_id",
        "summary": "Get upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Return information about an upload session.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an upload session object.",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "put": {
        "operationId": "put_files_upload_sessions_id",
        "summary": "Upload part of file",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Updates a chunk of an upload session for a file.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\nTo get the value for the `SHA` digest, use the\nopenSSL command to encode the file part:\n`openssl sha1 -binary <FILE_PART_NAME> | base64`\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "content-range",
            "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session. Each part’s size must be\nexactly equal in size to the part size specified\nin the upload session that you created.\nOne exception is the last part of the file, as this can be smaller.\n\nWhen providing the value for `content-range`, remember that:\n\n* The lower bound of each part's byte range\n  must be a multiple of the part size.\n* The higher bound must be a multiple of the part size - 1.",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Chunk has been uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/UploadedPart"
            }
          },
          "409": {
            "description": "Returns an error if the chunk conflicts with another\nchunk previously uploaded.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if a precondition was not met.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "416": {
            "description": "Returns an error if the content range does not match a specified range\nfor the session.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_files_upload_sessions_id",
        "summary": "Remove upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Abort an upload session and discard all data uploaded.\n\nThis cannot be reversed.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "A blank response is returned if the session was\nsuccessfully aborted."
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/parts": {
      "get": {
        "operationId": "get_files_upload_sessions_id_parts",
        "summary": "List parts",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Return a list of the chunks uploaded to the upload\nsession so far.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset of the item at which to begin the response.\n\nQueries with offset parameter value\nexceeding 10000 will be rejected\nwith a 400 response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "maximum": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of parts that have been uploaded.",
            "schema": {
              "$ref": "#/definitions/UploadParts"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    },
    "/files/upload_sessions/{upload_session_id}/commit": {
      "post": {
        "operationId": "post_files_upload_sessions_id_commit",
        "summary": "Commit upload session",
        "tags": [
          "Uploads (Chunked)"
        ],
        "description": "Close an upload session and create a file from the\nuploaded chunks.",
        "parameters": [
          {
            "name": "upload_session_id",
            "description": "The ID of the upload session.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "digest",
            "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "if-match",
            "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "if-none-match",
            "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "parts"
              ],
              "properties": {
                "parts": {
                  "type": "array",
                  "description": "The list details for the uploaded parts",
                  "items": {
                    "$ref": "#/definitions/UploadPart"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the file object in a list.",
            "schema": {
              "$ref": "#/definitions/Files"
            }
          },
          "202": {
            "description": "Returns when all chunks have been uploaded but not yet processed.\n\nInspect the upload session to get more information about the\nprogress of processing the chunks, then retry committing the file\nwhen all chunks have processed.",
            "headers": {
              "Retry-After": {
                "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again.",
                "type": "integer"
              }
            }
          },
          "409": {
            "description": "Returns an error if there is already a file with the same name\nin the target folder.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "412": {
            "description": "Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "default": {
            "description": "An unexpected client error.",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Security": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
      "tokenUrl": "https://api.box.com/oauth2/token",
      "scopes": {
        "root_readonly": "Read all files and folders stored in Box",
        "root_readwrite": "Read and write all files and folders stored in Box",
        "manage_app_users": "Provision and manage app users",
        "manage_managed_users": "Provision and manage managed users",
        "manage_groups": "Manage an enterprise's groups",
        "manage_webhook": "Create webhooks programmatically through the API",
        "manage_enterprise_properties": "Manage enterprise properties",
        "manage_data_retention": "Manage data retention polices",
        "manage_legal_hold": "Manage Legal Holds"
      }
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ],
  "definitions": {
    "Files": {
      "title": "Files",
      "type": "object",
      "description": "A list of files",
      "properties": {
        "total_count": {
          "description": "The number of files.",
          "type": "integer",
          "format": "int64"
        },
        "entries": {
          "type": "array",
          "description": "A list of files",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "ClientError": {
      "title": "Client error",
      "type": "object",
      "description": "A generic error",
      "properties": {
        "type": {
          "description": "error",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "status": {
          "description": "The HTTP status of the response.",
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "description": "A Box-specific error code",
          "type": "string",
          "enum": [
            "created",
            "accepted",
            "no_content",
            "redirect",
            "not_modified",
            "bad_request",
            "unauthorized",
            "forbidden",
            "not_found",
            "method_not_allowed",
            "conflict",
            "precondition_failed",
            "too_many_requests",
            "internal_server_error",
            "unavailable",
            "item_name_invalid",
            "insufficient_scope"
          ]
        },
        "message": {
          "description": "A short message describing the error.",
          "type": "string"
        },
        "context_info": {
          "description": "A free-form object that contains additional context\nabout the error. The possible fields are defined on\na per-endpoint basis. `message` is only one example.",
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "More details on the error."
            }
          }
        },
        "help_url": {
          "description": "A URL that links to more information about why this error occurred.",
          "type": "string"
        },
        "request_id": {
          "description": "A unique identifier for this response, which can be used\nwhen contacting Box support.",
          "type": "string"
        }
      }
    },
    "UploadSession": {
      "title": "Upload session",
      "type": "object",
      "description": "An upload session for chunk uploading a file.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this session"
        },
        "type": {
          "type": "string",
          "description": "`upload_session`",
          "enum": [
            "upload_session"
          ]
        },
        "session_expires_at": {
          "description": "The date and time when this session expires.",
          "type": "string",
          "format": "date-time"
        },
        "part_size": {
          "type": "integer",
          "format": "int64",
          "description": "The  size in bytes that must be used for all parts of of the\nupload.\n\nOnly the last part is allowed to be of a smaller size."
        },
        "total_parts": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of parts expected in this upload session,\nas determined by the file size and part size."
        },
        "num_parts_processed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of parts that have been uploaded and processed\nby the server. This starts at `0`.\n\nWhen committing a file files, inspecting this property can\nprovide insight if all parts have been uploaded correctly."
        },
        "session_endpoints": {
          "allOf": [
            {
              "title": "Session endpoints",
              "description": "A list of endpoints for a chunked upload session.",
              "type": "object",
              "properties": {
                "upload_part": {
                  "type": "string",
                  "description": "The URL to upload parts to"
                },
                "commit": {
                  "type": "string",
                  "description": "The URL used to commit the file"
                },
                "abort": {
                  "type": "string",
                  "description": "The URL for used to abort the session."
                },
                "list_parts": {
                  "type": "string",
                  "description": "The URL users to list all parts."
                },
                "status": {
                  "type": "string",
                  "description": "The URL used to get the status of the upload."
                },
                "log_event": {
                  "type": "string",
                  "description": "The URL used to get the upload log from."
                }
              }
            },
            {
              "description": "A list of endpoints for this session."
            }
          ]
        }
      }
    },
    "UploadedPart": {
      "title": "Uploaded part",
      "type": "object",
      "description": "A chunk of a file uploaded as part of\nan upload session, as returned by some endpoints.",
      "properties": {
        "part": {
          "$ref": "#/definitions/UploadPart"
        }
      }
    },
    "UploadParts": {
      "title": "Upload parts",
      "type": "object",
      "description": "A list of uploaded chunks for an upload\nsession.",
      "allOf": [
        {
          "type": "object",
          "description": "The part of an API response that describes pagination",
          "properties": {
            "total_count": {
              "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "limit": {
              "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
              "type": "integer",
              "format": "int64"
            },
            "offset": {
              "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "integer",
              "format": "int64"
            },
            "order": {
              "description": "The order by which items are returned.\n\nThis field is only returned for calls that use offset-based pagination.\nFor marker-based paginated APIs, this field will be omitted.",
              "type": "array",
              "items": {
                "type": "object",
                "description": "The order in which a pagination is ordered",
                "properties": {
                  "by": {
                    "description": "The field to order by",
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "description": "The direction to order by, either ascending or descending",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "properties": {
            "entries": {
              "type": "array",
              "description": "A list of uploaded chunks for an upload\nsession",
              "items": {
                "$ref": "#/definitions/UploadPart"
              }
            }
          }
        }
      ]
    },
    "UploadPart": {
      "title": "Upload part",
      "type": "object",
      "x-box-variant": "standard",
      "description": "The representation of an upload\nsession chunk.",
      "allOf": [
        {
          "$ref": "#/definitions/UploadPart--Mini"
        },
        {
          "properties": {
            "sha1": {
              "description": "The SHA1 hash of the chunk.",
              "type": "string"
            }
          }
        }
      ]
    },
    "File": {
      "title": "File",
      "type": "object",
      "x-box-variant": "standard",
      "description": "A standard representation of a file, as returned from any\nfile API endpoints by default",
      "allOf": [
        {
          "$ref": "#/definitions/File--Mini"
        },
        {
          "properties": {
            "description": {
              "type": "string",
              "description": "The optional description of this file",
              "maxLength": 256
            },
            "size": {
              "type": "integer",
              "description": "The file size in bytes. Be careful parsing this integer as it can\nget very large and cause an integer overflow."
            },
            "path_collection": {
              "allOf": [
                {
                  "title": "Path collection",
                  "description": "A list of parent folders for an item.",
                  "type": "object",
                  "required": [
                    "total_count",
                    "entries"
                  ],
                  "properties": {
                    "total_count": {
                      "description": "The number of folders in this list.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "entries": {
                      "type": "array",
                      "description": "The parent folders for this item",
                      "items": {
                        "$ref": "#/definitions/Folder--Mini"
                      }
                    }
                  }
                },
                {
                  "description": "The tree of folders that this file is contained in,\nstarting at the root."
                },
                {}
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the file was created on Box."
            },
            "modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the file was last updated on Box."
            },
            "trashed_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file was put in the trash."
            },
            "purged_at": {
              "type": "string",
              "format": "date-time",
              "description": "The time at which this file is expected to be purged\nfrom the trash."
            },
            "content_created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this file was originally\ncreated, which might be before it was uploaded to Box."
            },
            "content_modified_at": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time at which this file was last updated,\nwhich might be before it was uploaded to Box."
            },
            "created_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who created this file"
                }
              ]
            },
            "modified_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who last modified this file"
                },
                {}
              ]
            },
            "owned_by": {
              "allOf": [
                {
                  "$ref": "#/definitions/User--Mini"
                },
                {
                  "description": "The user who owns this file"
                },
                {}
              ]
            },
            "shared_link": {
              "allOf": [
                {
                  "title": "Shared link",
                  "description": "Shared links provide direct, read-only access to files or folder on Box.\n\nShared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriately authenticated Box users.",
                  "type": "object",
                  "required": [
                    "url",
                    "accessed",
                    "effective_access",
                    "effective_permission",
                    "is_password_enabled",
                    "download_count",
                    "preview_count"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL that can be used to access the item on Box.\n\nThis URL will display the item in Box's preview UI where the file\ncan be downloaded if allowed.\n\nThis URL will continue to work even when a custom `vanity_url`\nhas been set for this shared link."
                    },
                    "download_url": {
                      "type": "string",
                      "format": "url",
                      "x-box-premium-feature": true,
                      "description": "A URL that can be used to download the file. This URL can be used in\na browser to download the file. This URL includes the file\nextension so that the file will be saved with the right file type.\n\nThis property will be `null` for folders."
                    },
                    "vanity_url": {
                      "type": "string",
                      "format": "url",
                      "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application."
                    },
                    "vanity_name": {
                      "type": "string",
                      "description": "The custom name of a shared link, as used in the `vanity_url` field."
                    },
                    "access": {
                      "type": "string",
                      "description": "The access level for this shared link.\n\n* `open` - provides access to this item to anyone with this link\n* `company` - only provides access to this item to people the same company\n* `collaborators` - only provides access to this item to people who are\n   collaborators on this item\n\nIf this field is omitted when creating the shared link, the access level\nwill be set to the default access level specified by the enterprise admin.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_access": {
                      "type": "string",
                      "description": "The effective access level for the shared link. This can be a more\nrestrictive access level than the value in the `access` field when the\nenterprise settings restrict the allowed access levels.",
                      "enum": [
                        "open",
                        "company",
                        "collaborators"
                      ]
                    },
                    "effective_permission": {
                      "type": "string",
                      "description": "The effective permissions for this shared link.\nThese result in the more restrictive combination of\nthe share link permissions and the item permissions set\nby the administrator, the owner, and any ancestor item\nsuch as a folder.",
                      "enum": [
                        "can_edit",
                        "can_download",
                        "can_preview",
                        "no_access"
                      ]
                    },
                    "unshared_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when this link will be unshared. This field can only be\nset by users with paid accounts."
                    },
                    "is_password_enabled": {
                      "type": "boolean",
                      "description": "Defines if the shared link requires a password to access the item."
                    },
                    "permissions": {
                      "type": "object",
                      "description": "Defines if this link allows a user to preview, edit, and download an item.\nThese permissions refer to the shared link only and\ndo not supersede permissions applied to the item itself.",
                      "required": [
                        "can_download",
                        "can_preview",
                        "can_edit"
                      ],
                      "properties": {
                        "can_download": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be downloaded. For\nshared links on folders, this also applies to any items in the folder.\n\nThis value can be set to `true` when the effective access level is\nset to `open` or `company`, not `collaborators`."
                        },
                        "can_preview": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be previewed.\n\nThis value is always `true`. For shared links on folders this also\napplies to any items in the folder."
                        },
                        "can_edit": {
                          "type": "boolean",
                          "description": "Defines if the shared link allows for the item to be edited.\n\nThis value can only be `true` if `can_download` is also `true` and if\nthe item has a type of `file`."
                        }
                      }
                    },
                    "download_count": {
                      "type": "integer",
                      "description": "The number of times this item has been downloaded."
                    },
                    "preview_count": {
                      "type": "integer",
                      "description": "The number of times this item has been previewed."
                    }
                  }
                },
                {
                  "description": "The shared link for this file. This will be\n`null` if no shared link has been created for this\nfile."
                },
                {}
              ]
            },
            "parent": {
              "allOf": [
                {
                  "$ref": "#/definitions/Folder--Mini"
                },
                {
                  "description": "The folder that this file is located within."
                }
              ]
            },
            "item_status": {
              "type": "string",
              "description": "Defines if this item has been deleted or not.\n\n* `active` when the item has is not in the trash\n* `trashed` when the item has been moved to the trash but not deleted\n* `deleted` when the item has been permanently deleted.",
              "enum": [
                "active",
                "trashed",
                "deleted"
              ]
            }
          }
        }
      ]
    },
    "UploadPart--Mini": {
      "title": "Upload part (Mini)",
      "type": "object",
      "x-box-variants": [
        "mini",
        "standard"
      ],
      "x-box-variant": "mini",
      "description": "The basic representation of an upload\nsession chunk.",
      "properties": {
        "part_id": {
          "description": "The unique ID of the chunk.",
          "type": "string"
        },
        "offset": {
          "description": "The offset of the chunk within the file\nin bytes. The lower bound of the position\nof the chunk within the file.",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "The size of the chunk in bytes.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "File--Mini": {
      "title": "File (Mini)",
      "type": "object",
      "x-box-variant": "mini",
      "description": "A mini representation of a file, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/File--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the file"
            },
            "sha1": {
              "type": "string",
              "format": "digest",
              "description": "The SHA1 hash of the file. This can be used to compare the contents\nof a file on Box with a local file."
            },
            "file_version": {
              "allOf": [
                {
                  "$ref": "#/definitions/FileVersion--Mini"
                },
                {
                  "description": "The information about the current version of the file."
                }
              ]
            }
          }
        }
      ]
    },
    "Folder--Mini": {
      "title": "Folder (Mini)",
      "type": "object",
      "x-box-variant": "mini",
      "description": "A mini representation of a file version, used when\nnested under another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/Folder--Base"
        },
        {
          "properties": {
            "sequence_id": {
              "allOf": [
                {
                  "type": "string",
                  "description": "A numeric identifier that represents the most recent user event\nthat has been applied to this item.\n\nThis can be used in combination with the `GET /events`-endpoint\nto filter out user events that would have occurred before this\nidentifier was read.\n\nAn example would be where a Box Drive-like application\nwould fetch an item via the API, and then listen to incoming\nuser events for changes to the item. The application would\nignore any user events where the `sequence_id` in the event\nis smaller than or equal to the `sequence_id` in the originally\nfetched resource."
                },
                {}
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the folder."
            }
          }
        }
      ]
    },
    "User--Mini": {
      "title": "User (Mini)",
      "type": "object",
      "x-box-variant": "mini",
      "description": "A mini representation of a user, as can be returned when nested within other\nresources.",
      "allOf": [
        {
          "$ref": "#/definitions/User--Base"
        },
        {
          "properties": {
            "name": {
              "type": "string",
              "description": "The display name of this user",
              "maxLength": 50
            },
            "login": {
              "type": "string",
              "format": "email",
              "description": "The primary email address of this user"
            }
          }
        }
      ]
    },
    "File--Base": {
      "title": "File (Base)",
      "type": "object",
      "x-box-variants": [
        "base",
        "mini",
        "standard",
        "full"
      ],
      "x-box-variant": "base",
      "description": "The bare basic representation of a file, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this file. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the file if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`file`",
          "enum": [
            "file"
          ]
        }
      }
    },
    "FileVersion--Mini": {
      "title": "File version (Mini)",
      "type": "object",
      "x-box-variant": "mini",
      "description": "A mini representation of a file version, used when\nnested within another resource.",
      "allOf": [
        {
          "$ref": "#/definitions/FileVersion--Base"
        },
        {
          "properties": {
            "sha1": {
              "type": "string",
              "description": "The SHA1 hash of this version of the file."
            }
          }
        }
      ]
    },
    "Folder--Base": {
      "title": "Folder (Base)",
      "type": "object",
      "x-box-variants": [
        "base",
        "mini",
        "standard",
        "full"
      ],
      "x-box-variant": "base",
      "description": "The bare basic representation of a folder, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting a folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folders/123`\nthe `folder_id` is `123`."
        },
        "etag": {
          "type": "string",
          "description": "The HTTP `etag` of this folder. This can be used within some API\nendpoints in the `If-Match` and `If-None-Match` headers to only\nperform changes on the folder if (no) changes have happened."
        },
        "type": {
          "type": "string",
          "description": "`folder`",
          "enum": [
            "folder"
          ]
        }
      }
    },
    "User--Base": {
      "title": "User (Base)",
      "type": "object",
      "x-box-variants": [
        "base",
        "mini",
        "standard",
        "full"
      ],
      "x-box-variant": "base",
      "description": "A mini representation of a user, used when\nnested within another resource.",
      "required": [
        "type",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for this user"
        },
        "type": {
          "type": "string",
          "description": "`user`",
          "enum": [
            "user"
          ]
        }
      }
    },
    "FileVersion--Base": {
      "title": "File version (Base)",
      "type": "object",
      "x-box-variants": [
        "base",
        "mini",
        "standard",
        "full"
      ],
      "x-box-variant": "base",
      "description": "The bare basic representation of a file version, the minimal\namount of fields returned when using the `fields` query\nparameter.",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier that represent a file version."
        },
        "type": {
          "type": "string",
          "description": "`file_version`",
          "enum": [
            "file_version"
          ]
        }
      }
    }
  }
}